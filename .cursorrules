# 项目规范文档

## 📋 快速导航
- [项目概述](#1-项目概述)
- [技术栈](#2-技术栈)
- [目录结构](#3-目录结构)
- [核心规范](#4-核心规范)
- [开发规范](#5-开发规范)
- [Git 规范](#6-git-提交规范)
- [项目特定规范](#7-项目特定规范)
- [实用指导](#8-实用指导)

---

## 1. 项目概述

这是一个基于 Vue 3 的现代化管理系统，采用最新的技术栈和最佳实践。项目使用 Vite 作为构建工具，支持国际化，并集成了 Element Plus 组件库。

### 项目特点
- 🚀 基于 Vue 3 + Vite 的现代化架构
- 🎨 集成 Element Plus 组件库
- 🌍 支持国际化（中文/英文）
- 📱 响应式设计，支持多端适配
- 🔧 完善的开发工具链

### 核心优势
- **开发效率**：Vite 快速热重载，提升开发体验
- **代码质量**：TypeScript 类型安全，ESLint 代码规范
- **用户体验**：Element Plus 组件库，美观易用
- **可维护性**：模块化设计，清晰的代码结构

---

## 2. 技术栈

### 核心框架
- **Vue**: 3.5.14 - 渐进式 JavaScript 框架
- **Vite**: 最新版本 - 下一代前端构建工具

### 主要依赖
| 依赖名称 | 版本号 | 用途 |
|---------|--------|------|
| Vue | 3.5.14 | 核心框架 |
| Element Plus | 2.9.10 | UI 组件库 |
| Pinia | 3.0.2 | 状态管理 |
| Vue Router | 4.5.1 | 路由管理 |
| Vue I18n | 11.1.3 | 国际化 |
| TailwindCSS | 4.1.7 | CSS 框架 |
| Axios | 1.9.0 | HTTP 客户端 |
| ECharts | 5.6.0 | 图表库 |

### 开发工具
- **TypeScript**: 类型安全
- **ESLint**: 代码质量检查
- **Prettier**: 代码格式化
- **Stylelint**: 样式代码检查

---

## 3. 目录结构

```
├── src/                    # 源代码目录
│   ├── api/               # API 接口定义
│   ├── assets/            # 静态资源
│   ├── components/        # 公共组件
│   ├── layout/            # 布局组件
│   ├── router/            # 路由配置
│   ├── store/             # Pinia 状态管理
│   ├── styles/            # 全局样式
│   ├── utils/             # 工具函数
│   └── views/             # 页面组件
├── public/                # 公共资源
├── locales/               # 国际化文件
│   ├── en.yaml           # 英文翻译
│   └── zh-CN.yaml        # 中文翻译
└── mock/                  # 模拟数据
```

### 配置文件
```
├── .cursorrules            # 项目规范文档
├── .cursor/rules/          # 详细规范文件
│   ├── code.mdc           # 代码规范详情
│   ├── gyh.mdc            # 项目记录
│   └── jiekou.mdc         # 接口文档
├── .editorconfig          # 编辑器配置
├── .gitignore             # 忽略文件
├── .prettierrc            # 代码格式化配置
├── .stylelintrc.js        # 样式lint配置
├── .vite.config.js        # Vite配置
├── main.js                # 入口文件
├── App.vue                # 根组件
├── index.html             # 入口HTML文件
├── package.json           # 项目配置文件
└── README.md              # 项目说明文档
```

---

## 4. 核心规范

### 4.1 命名规范

#### 变量命名
- 使用驼峰命名法（camelCase）
  - ✅ 正确示例：`userName`, `getUserInfo`
  - ❌ 错误示例：`user_name`, `get_user_info`

#### 组件命名
- 使用 PascalCase
  - ✅ 正确示例：`UserProfile`, `DataTable`
  - ❌ 错误示例：`user-profile`, `data-table`

#### 常量命名
- 使用大写字母和下划线
  - ✅ 正确示例：`MAX_COUNT`, `API_BASE_URL`
  - ❌ 错误示例：`maxCount`, `apiBaseUrl`

### 4.2 组件规范

#### 页面组件
- 位置：`views` 目录下
- 命名：使用 `index.vue` 作为入口文件
- 示例：`views/home/index.vue`

#### 私有组件
- 位置：对应页面的 `components` 目录下
- 示例：`views/home/components/UserList.vue`

#### 公共组件
- 位置：`components` 目录下
- 示例：`components/BaseButton/index.vue`

### 4.3 样式规范
- 使用 SCSS 预处理器
- 遵循 BEM 命名规范
- 使用 TailwindCSS 工具类
- 组件样式使用 scoped 属性
- 全局样式定义在 `styles` 目录下

### 4.4 国际化规范

#### 支持语言
- 中文（zh-CN）
- 英文（en）

#### 翻译文件位置
- 中文翻译：`locales/zh-CN.yaml`
- 英文翻译：`locales/en.yaml`

#### 使用方式
```javascript
import { useI18n } from 'vue-i18n'
const { t } = useI18n()
t('message.hello')
```

---

## 5. 开发规范

### 5.1 代码规范
1. **描述性命名**：使用描述性变量和函数/常量名称
2. **事件处理**：事件函数应使用"handle"前缀命名
   - 示例：`handleClick` 用于 onClick
   - 示例：`handleKeyDown` 用于 onKeyDown
3. **可访问性**：在元素上实现可访问性功能
   - 标签应包含：`tabindex="0"`、`aria-label`、`on:click`、`on:keydown` 等属性
4. **函数定义**：使用 consts 而不是函数
   - 示例：`const toggle = () => {}`
5. **类型定义**：添加必要的类型定义

### 5.2 Vue 3 最佳实践
1. **Composition API**：优先使用 Composition API
2. **Props 和 Emits**：实现正确的 props 和 emits 定义
3. **Teleport**：在需要时使用 Vue 3 的 Teleport 组件
4. **Suspense**：使用 Suspense 处理异步组件
5. **错误处理**：实现正确的错误处理
6. **早返回**：尽可能使用早返回（early returns）来提高代码的可读性

### 5.3 文件结构规范
```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup>
  // 导入语句
  // 响应式数据
  // 计算属性
  // 方法
  // 生命周期钩子
</script>

<style scoped>
  /* 样式内容 */
</style>
```

### 5.4 注释规范
1. **函数注释**：在每个函数的开头添加功能描述
2. **组件注释**：在每个组件的文件开头添加功能描述
3. **TODO 注释**：在发现 Bug 时添加以"TODO:"开头的注释

---

## 6. Git 提交规范

### 提交格式
`${type}: ${emoji} ${description}`

### 类型说明
| 类型 | 表情 | 说明 |
|------|------|------|
| feat | 🎉 | 新功能 |
| fix | 🐛 | 修复 |
| docs | 📝 | 文档 |
| style | 💄 | 格式 |
| refactor | ♻️ | 重构 |
| perf | ⚡️ | 性能 |
| test | ✅ | 测试 |
| chore | 🔧 | 构建过程或辅助工具的变动 |

### 示例
- `feat: 🎉 添加用户管理功能`
- `fix: 🐛 修复登录验证问题`
- `docs: 📝 更新 README 文档`

### 提交规范详解
- **feat**: 新功能，如新增页面、组件、功能模块
- **fix**: 修复 Bug，如修复逻辑错误、样式问题
- **docs**: 文档更新，如更新 README、注释、文档
- **style**: 代码格式调整，如缩进、空格、分号等
- **refactor**: 代码重构，如优化代码结构、提取函数
- **perf**: 性能优化，如优化渲染、减少请求
- **test**: 测试相关，如添加测试用例、修复测试
- **chore**: 构建工具或辅助工具的变动

---

## 7. 项目特定规范

### 7.1 最小化代码改动原则
1. 仅修改与当前任务相关的代码部分
2. 避免修改无关的代码部分
3. 避免更改现有注释
4. 除非有明确指示，否则不要对代码进行任何清理

### 7.2 详细规范文件
- **代码规范详情**：`.cursor/rules/code.mdc`
- **项目记录**：`.cursor/rules/gyh.mdc`
- **接口文档**：`.cursor/rules/jiekou.mdc`

---

## 8. 实用指导

### 8.1 开发工具配置

#### VSCode 推荐配置
```json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "typescript.preferences.importModuleSpecifier": "relative"
}
```

#### 推荐插件
- **Volar**: Vue 3 语言支持
- **TypeScript Vue Plugin**: TypeScript 支持
- **ESLint**: 代码质量检查
- **Prettier**: 代码格式化
- **Auto Rename Tag**: 自动重命名标签

### 8.2 性能优化技巧

#### 组件优化
```javascript
// ✅ 使用 computed 缓存计算结果
const filteredData = computed(() => {
  return data.value.filter(item => item.active)
})

// ✅ 使用 v-memo 优化列表渲染
<div v-for="item in list" :key="item.id" v-memo="[item.id, item.status]">
  {{ item.name }}
</div>

// ✅ 使用 defineAsyncComponent 懒加载组件
const AsyncComponent = defineAsyncComponent(() => import('./HeavyComponent.vue'))
```

#### 事件优化
```javascript
// ✅ 使用防抖处理搜索
const handleSearch = useDebounceFn((keyword) => {
  searchData(keyword)
}, 300)

// ✅ 使用节流处理滚动
const handleScroll = useThrottleFn(() => {
  loadMoreData()
}, 200)
```

### 8.3 常见问题解决方案

#### 1. 组件通信问题
```javascript
// 父子组件通信
// 父组件
<ChildComponent :data="parentData" @update="handleUpdate" />

// 子组件
const emit = defineEmits<{
  update: [value: string]
}>()

const handleClick = () => {
  emit('update', 'new value')
}
```

#### 2. 响应式数据问题
```javascript
// ✅ 正确：使用 ref 或 reactive
const user = ref({ name: 'John', age: 25 })
const userInfo = reactive({ name: 'John', age: 25 })

// ❌ 错误：直接修改对象属性
user.value.name = 'Jane' // 这样不会触发响应式更新
```

#### 3. 路由参数获取
```javascript
// ✅ 正确：使用 useRoute
import { useRoute } from 'vue-router'

const route = useRoute()
const userId = route.params.id

// ✅ 正确：使用 watch 监听路由变化
watch(() => route.params.id, (newId) => {
  if (newId) {
    fetchUserData(newId)
  }
})
```

### 8.4 调试技巧

#### 开发环境调试
```javascript
// 使用 console.log 调试
console.log('用户数据:', user.value)

// 使用 Vue DevTools 调试
// 安装 Vue DevTools 浏览器扩展

// 使用 debugger 断点调试
const handleSubmit = () => {
  debugger // 浏览器会在这里暂停
  // 业务逻辑
}
```

#### 错误处理
```javascript
// 全局错误处理
app.config.errorHandler = (err, instance, info) => {
  console.error('全局错误:', err)
  console.error('错误信息:', info)

  // 发送错误到监控服务
  if (import.meta.env.PROD) {
    // 生产环境错误上报
  }
}

// 组件错误边界
<ErrorBoundary>
  <template #default>
    <UserList />
  </template>
  <template #fallback="{ error }">
    <div class="error-container">
      <p>组件加载失败: {{ error.message }}</p>
      <button @click="handleRetry">重试</button>
    </div>
  </template>
</ErrorBoundary>
```



---

## 📚 相关文档
- [Vue 3 官方文档](https://vuejs.org/)
- [Element Plus 文档](https://element-plus.org/)
- [Vite 官方文档](https://vitejs.dev/)
- [TailwindCSS 文档](https://tailwindcss.com/)
- [TypeScript 官方文档](https://www.typescriptlang.org/)

---

## 🔧 快速命令

### 开发命令
```bash
# 安装依赖
pnpm install

# 启动开发服务器
pnpm dev

# 构建生产版本
pnpm build

# 代码检查
pnpm lint

# 代码格式化
pnpm format
```



---

*最后更新：2024-12-19*
